How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It only show changes, who are the cause of the new bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It shortens debug time

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    pro: Less history, you could reflect one functional change per commit
    con: You could forget to commit and lose changes in history or mix
    various changes in a single commit

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Programing files can be interrelated, like the example in the videos
    (adding a button affect one .js, .html and .css file)

How can you use the commands git log and git diff to view the history of files?

    git log will show the commits
    git log --stat will show the files and insertions/deletions per commit
    git diff commit1 commit2 show lines changed in diff format (be aware of
        reversed commit order in log)

How might using version control make you more confident to make changes that
could break something?

    You could roll back yor changes to a working state an look what lines
    introduced the bug

Now that you have your workspace set up, what do you want to try using Git for?

    Programming version control
